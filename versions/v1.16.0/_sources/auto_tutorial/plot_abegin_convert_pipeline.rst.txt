
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorial/plot_abegin_convert_pipeline.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorial_plot_abegin_convert_pipeline.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorial_plot_abegin_convert_pipeline.py:


.. _l-simple-deploy-1:

Train and deploy a scikit-learn pipeline
========================================

.. index:: pipeline, deployment

This program starts from an example in :epkg:`scikit-learn`
documentation: `Plot individual and voting regression predictions
<https://scikit-learn.org/stable/auto_examples/ensemble/plot_voting_regressor.html>`_,
converts it into ONNX and finally computes the predictions
a different runtime.

Training a pipeline
+++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 20-50

.. code-block:: default

    import numpy
    from onnxruntime import InferenceSession
    from sklearn.datasets import load_diabetes
    from sklearn.ensemble import (
        GradientBoostingRegressor,
        RandomForestRegressor,
        VotingRegressor,
    )
    from sklearn.linear_model import LinearRegression
    from sklearn.model_selection import train_test_split
    from sklearn.pipeline import Pipeline
    from skl2onnx import to_onnx
    from onnx.reference import ReferenceEvaluator


    X, y = load_diabetes(return_X_y=True)
    X_train, X_test, y_train, y_test = train_test_split(X, y)

    # Train classifiers
    reg1 = GradientBoostingRegressor(random_state=1, n_estimators=5)
    reg2 = RandomForestRegressor(random_state=1, n_estimators=5)
    reg3 = LinearRegression()

    ereg = Pipeline(
        steps=[
            ("voting", VotingRegressor([("gb", reg1), ("rf", reg2), ("lr", reg3)])),
        ]
    )
    ereg.fit(X_train, y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-4 {color: black;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-4" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;voting&#x27;,
                     VotingRegressor(estimators=[(&#x27;gb&#x27;,
                                                  GradientBoostingRegressor(n_estimators=5,
                                                                            random_state=1)),
                                                 (&#x27;rf&#x27;,
                                                  RandomForestRegressor(n_estimators=5,
                                                                        random_state=1)),
                                                 (&#x27;lr&#x27;, LinearRegression())]))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-13" type="checkbox" ><label for="sk-estimator-id-13" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;voting&#x27;,
                     VotingRegressor(estimators=[(&#x27;gb&#x27;,
                                                  GradientBoostingRegressor(n_estimators=5,
                                                                            random_state=1)),
                                                 (&#x27;rf&#x27;,
                                                  RandomForestRegressor(n_estimators=5,
                                                                        random_state=1)),
                                                 (&#x27;lr&#x27;, LinearRegression())]))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-14" type="checkbox" ><label for="sk-estimator-id-14" class="sk-toggleable__label sk-toggleable__label-arrow">voting: VotingRegressor</label><div class="sk-toggleable__content"><pre>VotingRegressor(estimators=[(&#x27;gb&#x27;,
                                 GradientBoostingRegressor(n_estimators=5,
                                                           random_state=1)),
                                (&#x27;rf&#x27;,
                                 RandomForestRegressor(n_estimators=5,
                                                       random_state=1)),
                                (&#x27;lr&#x27;, LinearRegression())])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>gb</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-15" type="checkbox" ><label for="sk-estimator-id-15" class="sk-toggleable__label sk-toggleable__label-arrow">GradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>GradientBoostingRegressor(n_estimators=5, random_state=1)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>rf</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-16" type="checkbox" ><label for="sk-estimator-id-16" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(n_estimators=5, random_state=1)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>lr</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-17" type="checkbox" ><label for="sk-estimator-id-17" class="sk-toggleable__label sk-toggleable__label-arrow">LinearRegression</label><div class="sk-toggleable__content"><pre>LinearRegression()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 51-59

Converts the model
++++++++++++++++++

The second argument gives a sample of the data
used to train the model. It is used to infer
the input type of the ONNX graph. It is converted
into single float and ONNX runtimes may not fully
support doubles.

.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: default


    onx = to_onnx(ereg, X_train[:1].astype(numpy.float32), target_opset=12)








.. GENERATED FROM PYTHON SOURCE LINES 63-67

Prediction with ONNX
++++++++++++++++++++

The first example uses :epkg:`onnxruntime`.

.. GENERATED FROM PYTHON SOURCE LINES 67-76

.. code-block:: default


    sess = InferenceSession(onx.SerializeToString(), providers=["CPUExecutionProvider"])
    pred_ort = sess.run(None, {"X": X_test.astype(numpy.float32)})[0]

    pred_skl = ereg.predict(X_test.astype(numpy.float32))

    print("Onnx Runtime prediction:\n", pred_ort[:5])
    print("Sklearn rediction:\n", pred_skl[:5])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Onnx Runtime prediction:
     [[191.7974 ]
     [245.27979]
     [109.12971]
     [111.75992]
     [173.33968]]
    Sklearn rediction:
     [191.79737238 245.27977924 109.12969648 111.75990874 173.33966557]




.. GENERATED FROM PYTHON SOURCE LINES 77-84

.. _l-diff-dicrepencies:

Comparison
++++++++++

Before deploying, we need to compare that both
*scikit-learn* and *ONNX* return the same predictions.

.. GENERATED FROM PYTHON SOURCE LINES 84-95

.. code-block:: default



    def diff(p1, p2):
        p1 = p1.ravel()
        p2 = p2.ravel()
        d = numpy.abs(p2 - p1)
        return d.max(), (d / numpy.abs(p1)).max()


    print(diff(pred_skl, pred_ort))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (2.142160806783977e-05, 1.4564236223492598e-07)




.. GENERATED FROM PYTHON SOURCE LINES 96-102

It looks good. Biggest errors (absolute and relative)
are within the margin error introduced by using
floats instead of doubles.
We can save the model into ONNX
format and compute the same predictions in many
platform using :epkg:`onnxruntime`.

.. GENERATED FROM PYTHON SOURCE LINES 104-111

Python runtime
++++++++++++++

A python runtime can be used as well to compute
the prediction. It is not meant to be used into
production (it still relies on python), but it is
useful to investigate why the conversion went wrong.

.. GENERATED FROM PYTHON SOURCE LINES 111-115

.. code-block:: default


    oinf = ReferenceEvaluator(onx)
    print(oinf)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ReferenceEvaluator(X) -> variable




.. GENERATED FROM PYTHON SOURCE LINES 116-117

It works almost the same way.

.. GENERATED FROM PYTHON SOURCE LINES 117-120

.. code-block:: default


    pred_pyrt = oinf.run(None, {"X": X_test.astype(numpy.float32)})[0]
    print(diff(pred_skl, pred_pyrt))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (16.51177070735949, 0.11400212547427625)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.147 seconds)


.. _sphx_glr_download_auto_tutorial_plot_abegin_convert_pipeline.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_abegin_convert_pipeline.py <plot_abegin_convert_pipeline.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_abegin_convert_pipeline.ipynb <plot_abegin_convert_pipeline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
