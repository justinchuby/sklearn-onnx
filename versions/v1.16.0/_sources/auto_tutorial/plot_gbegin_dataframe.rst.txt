
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorial/plot_gbegin_dataframe.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorial_plot_gbegin_dataframe.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorial_plot_gbegin_dataframe.py:


Dataframe as an input
=====================

.. index:: dataframe

A pipeline usually ingests data as a matrix. It may be converted in a matrix
if all the data share the same type. But data held in a dataframe
have usually multiple types, float, integer or string for categories.
ONNX also supports that case.

A dataset with categories
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 18-57

.. code-block:: default

    from mlinsights.plotting import pipeline2dot
    import numpy
    import pprint
    from onnx.reference import ReferenceEvaluator
    from onnxruntime import InferenceSession
    from pandas import DataFrame
    from sklearn.pipeline import Pipeline
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder
    from sklearn.ensemble import RandomForestClassifier
    from pyquickhelper.helpgen.graphviz_helper import plot_graphviz
    from skl2onnx import to_onnx
    from skl2onnx.algebra.type_helper import guess_initial_types


    data = DataFrame(
        [
            dict(CAT1="a", CAT2="c", num1=0.5, num2=0.6, y=0),
            dict(CAT1="b", CAT2="d", num1=0.4, num2=0.8, y=1),
            dict(CAT1="a", CAT2="d", num1=0.5, num2=0.56, y=0),
            dict(CAT1="a", CAT2="d", num1=0.55, num2=0.56, y=1),
            dict(CAT1="a", CAT2="c", num1=0.35, num2=0.86, y=0),
            dict(CAT1="a", CAT2="c", num1=0.5, num2=0.68, y=1),
        ]
    )

    cat_cols = ["CAT1", "CAT2"]
    train_data = data.drop("y", axis=1)


    categorical_transformer = Pipeline(
        [("onehot", OneHotEncoder(sparse=False, handle_unknown="ignore"))]
    )
    preprocessor = ColumnTransformer(
        transformers=[("cat", categorical_transformer, cat_cols)], remainder="passthrough"
    )
    pipe = Pipeline([("preprocess", preprocessor), ("rf", RandomForestClassifier())])
    pipe.fit(train_data, data["y"])






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocess&#x27;,
                     ColumnTransformer(remainder=&#x27;passthrough&#x27;,
                                       transformers=[(&#x27;cat&#x27;,
                                                      Pipeline(steps=[(&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,
                                                                                     sparse=False))]),
                                                      [&#x27;CAT1&#x27;, &#x27;CAT2&#x27;])])),
                    (&#x27;rf&#x27;, RandomForestClassifier())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" ><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocess&#x27;,
                     ColumnTransformer(remainder=&#x27;passthrough&#x27;,
                                       transformers=[(&#x27;cat&#x27;,
                                                      Pipeline(steps=[(&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,
                                                                                     sparse=False))]),
                                                      [&#x27;CAT1&#x27;, &#x27;CAT2&#x27;])])),
                    (&#x27;rf&#x27;, RandomForestClassifier())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" ><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">preprocess: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,
                      transformers=[(&#x27;cat&#x27;,
                                     Pipeline(steps=[(&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,
                                                                    sparse=False))]),
                                     [&#x27;CAT1&#x27;, &#x27;CAT2&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox" ><label for="sk-estimator-id-3" class="sk-toggleable__label sk-toggleable__label-arrow">cat</label><div class="sk-toggleable__content"><pre>[&#x27;CAT1&#x27;, &#x27;CAT2&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-4" type="checkbox" ><label for="sk-estimator-id-4" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;, sparse=False)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox" ><label for="sk-estimator-id-5" class="sk-toggleable__label sk-toggleable__label-arrow">remainder</label><div class="sk-toggleable__content"><pre>[&#x27;num1&#x27;, &#x27;num2&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-6" type="checkbox" ><label for="sk-estimator-id-6" class="sk-toggleable__label sk-toggleable__label-arrow">passthrough</label><div class="sk-toggleable__content"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-7" type="checkbox" ><label for="sk-estimator-id-7" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestClassifier</label><div class="sk-toggleable__content"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 58-59

Display.

.. GENERATED FROM PYTHON SOURCE LINES 59-65

.. code-block:: default


    dot = pipeline2dot(pipe, train_data)
    ax = plot_graphviz(dot)
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)




.. image-sg:: /auto_tutorial/images/sphx_glr_plot_gbegin_dataframe_001.png
   :alt: plot gbegin dataframe
   :srcset: /auto_tutorial/images/sphx_glr_plot_gbegin_dataframe_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 66-70

Conversion to ONNX
++++++++++++++++++

Function *to_onnx* does not handle dataframes.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default



    onx = to_onnx(pipe, train_data[:1], options={RandomForestClassifier: {"zipmap": False}})








.. GENERATED FROM PYTHON SOURCE LINES 75-79

Prediction with ONNX
++++++++++++++++++++

*onnxruntime* does not support dataframes.

.. GENERATED FROM PYTHON SOURCE LINES 79-87

.. code-block:: default



    sess = InferenceSession(onx.SerializeToString(), providers=["CPUExecutionProvider"])
    try:
        sess.run(None, train_data)
    except Exception as e:
        print(e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run(): incompatible function arguments. The following argument types are supported:
        1. (self: onnxruntime.capi.onnxruntime_pybind11_state.InferenceSession, arg0: List[str], arg1: Dict[str, object], arg2: onnxruntime.capi.onnxruntime_pybind11_state.RunOptions) -> List[object]

    Invoked with: <onnxruntime.capi.onnxruntime_pybind11_state.InferenceSession object at 0x7f4512d02cf0>, ['label', 'probabilities'],   CAT1 CAT2  num1  num2
    0    a    c  0.50  0.60
    1    b    d  0.40  0.80
    2    a    d  0.50  0.56
    3    a    d  0.55  0.56
    4    a    c  0.35  0.86
    5    a    c  0.50  0.68, None




.. GENERATED FROM PYTHON SOURCE LINES 88-89

Let's use a shortcut

.. GENERATED FROM PYTHON SOURCE LINES 89-95

.. code-block:: default


    oinf = ReferenceEvaluator(onx)
    got = oinf.run(None, train_data)
    print(pipe.predict(train_data))
    print(got["label"])



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/xadupre/github/sklearn-onnx/docs/tutorial/plot_gbegin_dataframe.py", line 91, in <module>
        got = oinf.run(None, train_data)
      File "/home/xadupre/github/onnx/onnx/reference/reference_evaluator.py", line 526, in run
        outputs = node.run(*inputs, **linked_attributes)
      File "/home/xadupre/github/onnx/onnx/reference/op_run.py", line 477, in run
        raise TypeError(
    TypeError: Issues with types [<class 'pandas.core.series.Series'>, <class 'pandas.core.series.Series'>] and attributes ['axis'] and linked attributes=[] (operator 'Concat').




.. GENERATED FROM PYTHON SOURCE LINES 96-97

And probilities.

.. GENERATED FROM PYTHON SOURCE LINES 97-101

.. code-block:: default


    print(pipe.predict_proba(train_data))
    print(got["probabilities"])


.. GENERATED FROM PYTHON SOURCE LINES 102-112

It looks ok. Let's dig into the details to
directly use *onnxruntime*.

Unhide conversion logic with a dataframe
++++++++++++++++++++++++++++++++++++++++

A dataframe can be seen as a set of columns with
different types. That's what ONNX should see:
a list of inputs, the input name is the column name,
the input type is the column type.

.. GENERATED FROM PYTHON SOURCE LINES 112-133

.. code-block:: default



    def guess_schema_from_data(X):
        init = guess_initial_types(X)
        unique = set()
        for _, col in init:
            if len(col.shape) != 2:
                return init
            if col.shape[0] is not None:
                return init
            if len(unique) > 0 and col.__class__ not in unique:
                return init
            unique.add(col.__class__)
        unique = list(unique)
        return [("X", unique[0]([None, sum(_[1].shape[1] for _ in init)]))]


    init = guess_schema_from_data(train_data)

    pprint.pprint(init)


.. GENERATED FROM PYTHON SOURCE LINES 134-135

Let's use float instead.

.. GENERATED FROM PYTHON SOURCE LINES 135-145

.. code-block:: default



    for c in train_data.columns:
        if c not in cat_cols:
            train_data[c] = train_data[c].astype(numpy.float32)


    init = guess_schema_from_data(train_data)
    pprint.pprint(init)


.. GENERATED FROM PYTHON SOURCE LINES 146-147

Let's convert with *skl2onnx* only.

.. GENERATED FROM PYTHON SOURCE LINES 147-152

.. code-block:: default


    onx2 = to_onnx(
        pipe, initial_types=init, options={RandomForestClassifier: {"zipmap": False}}
    )


.. GENERATED FROM PYTHON SOURCE LINES 153-157

Let's run it with onnxruntime.
We need to convert the dataframe into a dictionary
where column names become keys, and column values become
values.

.. GENERATED FROM PYTHON SOURCE LINES 157-161

.. code-block:: default


    inputs = {c: train_data[c].values.reshape((-1, 1)) for c in train_data.columns}
    pprint.pprint(inputs)


.. GENERATED FROM PYTHON SOURCE LINES 162-163

Inference.

.. GENERATED FROM PYTHON SOURCE LINES 163-171

.. code-block:: default


    sess2 = InferenceSession(onx2.SerializeToString(), providers=["CPUExecutionProvider"])

    got2 = sess2.run(None, inputs)

    print(pipe.predict(train_data))
    print(got2[0])


.. GENERATED FROM PYTHON SOURCE LINES 172-173

And probilities.

.. GENERATED FROM PYTHON SOURCE LINES 173-176

.. code-block:: default


    print(pipe.predict_proba(train_data))
    print(got2[1])


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.602 seconds)


.. _sphx_glr_download_auto_tutorial_plot_gbegin_dataframe.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_gbegin_dataframe.py <plot_gbegin_dataframe.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_gbegin_dataframe.ipynb <plot_gbegin_dataframe.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
