
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorial/plot_gexternal_catboost.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorial_plot_gexternal_catboost.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorial_plot_gexternal_catboost.py:


.. _example-catboost:

Convert a pipeline with a CatBoost classifier
=============================================

.. index:: CatBoost

:epkg:`sklearn-onnx` only converts :epkg:`scikit-learn` models into *ONNX*
but many libraries implement :epkg:`scikit-learn` API so that their models
can be included in a :epkg:`scikit-learn` pipeline. This example considers
a pipeline including a :epkg:`CatBoost` model. :epkg:`sklearn-onnx` can convert
the whole pipeline as long as it knows the converter associated to
a *CatBoostClassifier*. Let's see how to do it.

Train a CatBoostClassifier
++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 21-54

.. code-block:: default

    import numpy
    from onnx.helper import get_attribute_value
    from sklearn.datasets import load_iris
    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    import onnxruntime as rt
    from skl2onnx import convert_sklearn, update_registered_converter
    from skl2onnx.common.shape_calculator import (
        calculate_linear_classifier_output_shapes,
    )  # noqa
    from skl2onnx.common.data_types import (
        FloatTensorType,
        Int64TensorType,
        guess_tensor_type,
    )
    from skl2onnx._parse import _apply_zipmap, _get_sklearn_operator_name
    from catboost import CatBoostClassifier
    from catboost.utils import convert_to_onnx_object

    data = load_iris()
    X = data.data[:, :2]
    y = data.target

    ind = numpy.arange(X.shape[0])
    numpy.random.shuffle(ind)
    X = X[ind, :].copy()
    y = y[ind].copy()

    pipe = Pipeline(
        [("scaler", StandardScaler()), ("lgbm", CatBoostClassifier(n_estimators=3))]
    )
    pipe.fit(X, y)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Learning rate set to 0.5
    0:      learn: 0.8212475        total: 58.2ms   remaining: 116ms
    1:      learn: 0.6738254        total: 59.9ms   remaining: 30ms
    2:      learn: 0.5837067        total: 60.5ms   remaining: 0us


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-5 {color: black;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-5" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),
                    (&#x27;lgbm&#x27;,
                     &lt;catboost.core.CatBoostClassifier object at 0x7f5eb565f850&gt;)])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-16" type="checkbox" ><label for="sk-estimator-id-16" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),
                    (&#x27;lgbm&#x27;,
                     &lt;catboost.core.CatBoostClassifier object at 0x7f5eb565f850&gt;)])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-17" type="checkbox" ><label for="sk-estimator-id-17" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-18" type="checkbox" ><label for="sk-estimator-id-18" class="sk-toggleable__label sk-toggleable__label-arrow">CatBoostClassifier</label><div class="sk-toggleable__content"><pre>&lt;catboost.core.CatBoostClassifier object at 0x7f5eb565f850&gt;</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 55-62

Register the converter for CatBoostClassifier
+++++++++++++++++++++++++++++++++++++++++++++

The model has no converter implemented in sklearn-onnx.
We need to register the one coming from *CatBoost* itself.
However, the converter does not follow sklearn-onnx design and
needs to be wrapped.

.. GENERATED FROM PYTHON SOURCE LINES 62-135

.. code-block:: default



    def skl2onnx_parser_castboost_classifier(scope, model, inputs, custom_parsers=None):
        options = scope.get_options(model, dict(zipmap=True))
        no_zipmap = isinstance(options["zipmap"], bool) and not options["zipmap"]

        alias = _get_sklearn_operator_name(type(model))
        this_operator = scope.declare_local_operator(alias, model)
        this_operator.inputs = inputs

        label_variable = scope.declare_local_variable("label", Int64TensorType())
        prob_dtype = guess_tensor_type(inputs[0].type)
        probability_tensor_variable = scope.declare_local_variable(
            "probabilities", prob_dtype
        )
        this_operator.outputs.append(label_variable)
        this_operator.outputs.append(probability_tensor_variable)
        probability_tensor = this_operator.outputs

        if no_zipmap:
            return probability_tensor

        return _apply_zipmap(
            options["zipmap"], scope, model, inputs[0].type, probability_tensor
        )


    def skl2onnx_convert_catboost(scope, operator, container):
        """
        CatBoost returns an ONNX graph with a single node.
        This function adds it to the main graph.
        """
        onx = convert_to_onnx_object(operator.raw_operator)
        opsets = {d.domain: d.version for d in onx.opset_import}
        if "" in opsets and opsets[""] >= container.target_opset:
            raise RuntimeError("CatBoost uses an opset more recent than the target one.")
        if len(onx.graph.initializer) > 0 or len(onx.graph.sparse_initializer) > 0:
            raise NotImplementedError(
                "CatBoost returns a model initializers. This option is not implemented yet."
            )
        if (
            len(onx.graph.node) not in (1, 2)
            or not onx.graph.node[0].op_type.startswith("TreeEnsemble")
            or (len(onx.graph.node) == 2 and onx.graph.node[1].op_type != "ZipMap")
        ):
            types = ", ".join(map(lambda n: n.op_type, onx.graph.node))
            raise NotImplementedError(
                f"CatBoost returns {len(onx.graph.node)} != 1 (types={types}). "
                f"This option is not implemented yet."
            )
        node = onx.graph.node[0]
        atts = {}
        for att in node.attribute:
            atts[att.name] = get_attribute_value(att)
        container.add_node(
            node.op_type,
            [operator.inputs[0].full_name],
            [operator.outputs[0].full_name, operator.outputs[1].full_name],
            op_domain=node.domain,
            op_version=opsets.get(node.domain, None),
            **atts,
        )


    update_registered_converter(
        CatBoostClassifier,
        "CatBoostCatBoostClassifier",
        calculate_linear_classifier_output_shapes,
        skl2onnx_convert_catboost,
        parser=skl2onnx_parser_castboost_classifier,
        options={"nocl": [True, False], "zipmap": [True, False, "columns"]},
    )








.. GENERATED FROM PYTHON SOURCE LINES 136-138

Convert
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 138-150

.. code-block:: default


    model_onnx = convert_sklearn(
        pipe,
        "pipeline_catboost",
        [("input", FloatTensorType([None, 2]))],
        target_opset={"": 12, "ai.onnx.ml": 2},
    )

    # And save.
    with open("pipeline_catboost.onnx", "wb") as f:
        f.write(model_onnx.SerializeToString())








.. GENERATED FROM PYTHON SOURCE LINES 151-155

Compare the predictions
+++++++++++++++++++++++

Predictions with CatBoost.

.. GENERATED FROM PYTHON SOURCE LINES 155-159

.. code-block:: default


    print("predict", pipe.predict(X[:5]))
    print("predict_proba", pipe.predict_proba(X[:1]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    predict [[2]
     [1]
     [2]
     [2]
     [2]]
    predict_proba [[0.15038602 0.38990275 0.45971123]]




.. GENERATED FROM PYTHON SOURCE LINES 160-161

Predictions with onnxruntime.

.. GENERATED FROM PYTHON SOURCE LINES 161-167

.. code-block:: default


    sess = rt.InferenceSession("pipeline_catboost.onnx", providers=["CPUExecutionProvider"])

    pred_onx = sess.run(None, {"input": X[:5].astype(numpy.float32)})
    print("predict", pred_onx[0])
    print("predict_proba", pred_onx[1][:1])




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    predict [2 1 2 2 2]
    predict_proba [{0: 0.1503860205411911, 1: 0.3899027407169342, 2: 0.4597112238407135}]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.425 seconds)


.. _sphx_glr_download_auto_tutorial_plot_gexternal_catboost.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_gexternal_catboost.py <plot_gexternal_catboost.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_gexternal_catboost.ipynb <plot_gexternal_catboost.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
